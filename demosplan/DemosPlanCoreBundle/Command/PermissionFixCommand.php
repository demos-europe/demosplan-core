<?php

/**
 * This file is part of the package demosplan.
 *
 * (c) 2010-present DEMOS plan GmbH, for more information see the license file.
 *
 * All rights reserved
 */

namespace demosplan\DemosPlanCoreBundle\Command;

use Symfony\Component\Console\Command\Command;
use demosplan\DemosPlanCoreBundle\Utilities\DemosPlanPath;
use EFrane\ConsoleAdditions\Batch\Batch;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

/**
 * dplan:permission:fix.
 *
 * Tries to autofix file permission issues
 */
class PermissionFixCommand extends CoreCommand
{
    protected static $defaultName = 'dplan:permission:fix';
    protected static $defaultDescription = 'Tries to autofix file permission issues';

    public function configure(): void
    {
        $this
            ->addOption(
                'group',
                'g',
                InputOption::VALUE_REQUIRED,
                'Linux group to be granted facls',
                'DEMOS'
            )
            ->addOption(
                'force',
                'f',
                InputOption::VALUE_NONE,
                'Also delete some known suspects that are known to be problematic'
            )
            ->setHelp("Try to autofix file permissions. Needs sudo permissions\nUsage:\n\tphp app/console dplan:permission:fix");
    }

    public function execute(InputInterface $input, OutputInterface $output): int
    {
        $group = $input->getOption('group');
        $force = $input->getOption('force');
        $fs = new Filesystem();

        $output = $this->setupIo($input, $output);
        $output->note('Trying to autofix permission issues. Wish me luck');

        // set facls to folders that needs to be written & read by current user, webserver and/or java service
        $rootPath = DemosPlanPath::getRootPath();

        $batch = Batch::create($this->getApplication(), $output);

        $acl = "g:{$group}:rwx";

        $batch
            ->addShell(['sudo', 'setfacl', '-dRm', $acl, 'vendor'], $rootPath)
            ->addShell(['sudo', 'setfacl', '-dRm', $acl, 'app/cache'], $rootPath)
            ->addShell(['sudo', 'setfacl', '-dRm', $acl, 'app/logs'], $rootPath)
            ->addShell(
                [
                    'sudo',
                    'setfacl',
                    '-dRm',
                    $acl,
                    'vendor/ocramius/package-versions/src/PackageVersions/Versions.php',
                ],
                $rootPath
            )
            ->addShell(['sudo', 'rm', '-f', 'app/logs/dev.log']);

        // try to do the same for htdocs folder which is used to serve files for the webserver
        $htdocsPath = $rootPath.'../htdocs';
        $projectPath = DemosPlanPath::getProjectPath();
        $htdocsProjectPath = str_replace('/src/projects', '/htdocs/projects', $projectPath);
        if ($fs->exists($htdocsPath)) {
            $batch->addShell(['sudo', 'setfacl', '-dRm', $acl, 'vendor'], $htdocsPath);
        }

        if ($fs->exists($htdocsProjectPath)) {
            $batch
                ->addShell(['sudo', 'setfacl', '-dRm', $acl, 'app/logs'], $htdocsProjectPath)
                ->addShell(['sudo', 'setfacl', '-dRm', $acl, 'app/cache'], $htdocsProjectPath)
                ->addShell(['sudo', 'rm', '-f', 'app/logs/dev.log'], $htdocsProjectPath);
        }

        // if needed delete some more files that are known to be problematic
        if ($force) {
            // a third party library keeps track of any used package version. File is autogenerated on composer update
            $batch->addShell(
                [
                    'sudo',
                    'rm',
                    '-f',
                    'vendor/ocramius/package-versions/src/PackageVersions/Versions.php',
                ],
                $rootPath
            );
        }

        $batch->run();

        $output->success('I did my best, hopefully it worked.');

        $output->writeln('It is suggested to run following commands manually (as I am not able to do it within a command)');
        $output->writeln('sudo rm -rf app/cache/dev/*');
        $output->writeln('sudo rm -rf app/cache/prod/*');
        $output->writeln('sudo rm -rf '.$htdocsProjectPath.'app/cache/dev/*');
        $output->writeln('sudo rm -rf '.$htdocsProjectPath.'app/cache/prod/*');

        if ($force) {
            $output->warning('You need to run `composer update` because you chose to force me to delete things');
        }

        return Command::SUCCESS;
    }
}
