//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  (c) 2010-present DEMOS plan GmbH.
//
//  This file is part of the package demosplan,
//  for more information see the license file.
//
//  All rights reserved
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  (c) 2010-present DEMOS E-Partizipation GmbH.
//
//  This file is part of the package demosplan,
//  for more information see the license file.
//
//  All rights reserved
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@use 'sass:color';
@use 'sass:math';


// Variables for o-form
$form-border-color: $dp-color-neutral-light-1;
$form-color: $dp-color-neutral-base;
$form-border-width: 1px;
$form-radius: $dp-input-radius;
$form-background-disabled: $dp-color-neutral-light-3;
$form-color-disabled: $dp-color-neutral-base;
$form-lineheight: 1.3em !important; // Remove the !important once there is no more element styling
$form-line-height: 1.3em; // use this for further calc() operations
$form-multiselect-selected-background: $dp-color-neutral-light-3;

////
/// @group objects
////

/// To explicitly style form elements, the form object is used.
///
/// While atm it only contains error styles required for frontend validation and legacy styles that put way too much
/// styling on generic elements, this object shall contain the default styles for form elements in *demosplan*.
///
/// @TODO design meaningful :focus, :disabled and error-states
/// @TODO remove styling of generic elements in favor of dedicated .o-form blocks

// Placeholders that are both used for old & new form styles
%is-invalid {
    &.is-invalid {
        outline: none;
        border-color: transparent !important;
        box-shadow: 0 0 0 2px $dp-color-status-failed-fill;
    }
}

// Refactor into .o-form from here

fieldset {
    margin-bottom: 0 !important;
    padding-bottom: $inuit-base-spacing-unit;
    min-width: 0; // fix ff gecko width problem -> force to not extend width: 100%

    border: none;
}

legend {
    font-size: $dp-font-size-large;
    font-family: $bold-font-family;
    font-weight: $bold-font-weight;
}

label {
    display: block;
    margin-bottom: $inuit-base-spacing-unit;

    cursor: pointer;

    font-family: $bold-font-family;
    font-weight: $bold-font-weight;
}

.lbl {
    margin: 0;

    font-family: $bold-font-family;
    font-weight: $bold-font-weight;
}

.lbl--text {
    cursor: pointer;

    font-family: $normal-font-family;
    font-weight: $normal-font-weight;
}

.lbl--spaced {
    margin-top: 27px !important; // compensate missing legend above fieldset column
}

.lbl__hint {
    @include inuit-font-size($dp-font-size-small, 1.3);

    // Other than the margin-top on the DpLabel hints (which is defined in .o-form__label),
    // we can't target all instances of form input elements preceded by a label containing
    // a .lbl__hint (simply because it would be too cumbersome to pick all occurrence in the code).
    // That is why the slightly bigger margin (6px) for these cases is not achieved by directly
    // applying it to the input element but by applying 3px margin-bottom to the hint, which then
    // adds up to the "standard" margin-top of the form element. Atm i don't get why this even works
    // (margins should collapse to 3px) but int does in most cases.
    margin: 0 0 math.div($inuit-base-spacing-unit--tiny, 2);

    font-family: $normal-font-family;
    font-weight: $normal-font-weight;
}

input[type='tel'],
input[type='text'],
input[type='password'],
input[type='email'],
input[type='number'],
input[type='url'],
select,
textarea {
    @extend %is-invalid;

    padding-left: $inuit-base-spacing-unit--tiny;

    border: 2px solid $dp-color-border-default;
    color: $form-color;
    cursor: text;

    font-family: $normal-font-family;
    font-weight: $normal-font-weight;
}

input[type='tel'],
input[type='text'],
input[type='password'],
input[type='email'],
input[type='number'],
input[type='url'] {
    &[disabled] {
        background: transparent;
        border: none;

        padding-left: 0;

        line-height: 1.5;
    }
}

// Search field tweaks
input[type='search'] {
    // clears the 'X' and 'Show PWD' from IE
    &::-ms-clear,
    &::-ms-reveal {
        display: none;
        width: 0;
        height: 0;
    }

    // Clears the 'X' from Chrome
    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
        display: none;
    }
}

input[type='number'] {
    appearance: textfield;
}

input[type='checkbox'],
input[type='radio'] {
    @extend %is-invalid;
}

input:required {
    box-shadow: none;
}

textarea {
    height: 360px;
    width: 100%;

    resize: vertical;
}

textarea[readonly] {
    border: none;

    height: auto;
    min-height: 200px;

    resize: none;
}

input[type='file'] {
    padding: 0;

    background: transparent;
    border: none;
    color: $form-color;
    cursor: pointer;
}

input[type='checkbox'] {
    vertical-align: middle;

    margin: 0 5px 3px 0;
}

label input[type='radio'] {
    vertical-align: middle;
}

select {
    border: 2px solid $dp-color-border-default;
    background-color: $dp-color-white;
    color: $form-color;
    cursor: default;

    font-family: $normal-font-family;
    font-weight: $normal-font-weight;

    .layout__item & {
        &:not([class*='o-form']) {
            padding-left: initial;
        }
    }
}

select[disabled] {
    background-color: color.adjust($dp-color-neutral-light-3, $lightness: -5%);
}

//  override layout styles in case applying .layout--flush to containing element has been forgotten by chance
select.layout__item {
    padding-left: 0;
}

option[disabled] {
    color: $dp-color-neutral-light-1;
}

input[readonly] {
    border: none;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    appearance: none;
}

.validation-hint {
    display: none;
}

.is-invalid + .validation-hint {
    display: block;
    margin-top: $inuit-base-spacing-unit--small;
    color: $dp-color-status-failed-text;
}

label.required {
    color: $dp-color-status-failed-text !important;
}

input[type='text'].required,
input[type='number'].required,
input[type='email'].required,
select.required {
    border-color: $dp-color-status-failed-border !important;
}

.disabled {
    @include unselectable;
    border: 2px solid $dp-color-white !important;
    color: $dp-color-text-muted;
}

i.disabled,
.btn-icns.disabled {
    border: none !important;
}

input.disabled {
    cursor: default !important;
}

.oeb label {
    font-weight: $normal-font-weight;
}


.o-form {
    $element-spacing-vertical: $dp-form-element-spacing-vertical;
    $element-spacing-horizontal: $inuit-base-spacing-unit--tiny;

    // Set a consistent height + padding for both buttons and input/select elements.
    // The height is calculated by adding $dp-button-font-size (which is used for
    // button line-height), vertical padding and 2px border.
    $element-height: $dp-button-font-size + $dp-form-element-spacing-vertical * 2 + 2px;

    // Basic styling of form labels
    &__label {
        display: block;
        margin-bottom: 0;

        cursor: pointer;

        font-family: $bold-font-family;
        font-weight: $bold-font-weight;

        // Default spacing between labels + control
        & + .o-form__control-input,
        & + .o-form__control-select,
        & + .o-form__control-tiptap,
        & + .o-form__control-textarea,
        & + .o-form__control-wrapper {
            margin-top: math.div($inuit-base-spacing-unit--tiny, 2);
        }

        // Larger spacing between labels with hint text + control
        &.has-hint + .o-form__control-input,
        &.has-hint + .o-form__control-select,
        &.has-hint + .o-form__control-tiptap,
        &.has-hint + .o-form__control-textarea,
        &.has-hint + .o-form__control-wrapper {
            margin-top: $inuit-base-spacing-unit--tiny;
        }
    }

    // These classes actually style the different input elements:
    //  .o-form__control-input (input type="(text|email|...)")
    //  .o-form__control-select (select)
    //  .o-form__control-textarea (textarea)
    //  .o-form__control-tiptap (tiptap wysiwyg editor; other styles are applied in vendor)
    //  .o-form__control-search (styles an input field with enhanced controls, should move to own file)
    &__control {
        &-input,
        &-textarea,
        &-tiptap {
            @extend %is-invalid;
            max-width: 100%;
        }

        &-input,
        &-search {
            height: $element-height;

            @if ($dp-use-system-ui == true) {
                // To fix the visual effect of having button texts appear a little bit below visual center
                // (which is caused by a flaw with half leading distribution in Segoe UI typeface) the upper padding
                // is reduced a little bit. Also see https://yaits.demos-deutschland.de/T19691
                padding: $element-spacing-vertical - 1px $element-spacing-horizontal $element-spacing-vertical + 1px;
            } @else {
                // Assume that half leading is distributed well on non-system fonts...
                padding: $element-spacing-vertical $element-spacing-horizontal;
            }

            background: $dp-color-white;
            color: $form-color;
            border: $form-border-width solid $form-border-color !important;
            line-height: $form-lineheight;
            border-radius: $form-radius;

            &[disabled],
            &.is-disabled {
                background: $form-background-disabled;
                color: $form-color-disabled;
                border: none !important;
            }

            &::-ms-clear {
                display: none;
            }

            // Firefox seems to style required fields with a reddish box shadow by default.
            // Since validation state is applied only when the field/form is validated,
            // we do not want this default style to interfere with custom error styles.
            &:required {
                box-shadow: none;
            }
        }


        &-search {
            &-reset,
            &-reset--small {
                position: absolute;

                // Strange things happen with focused icon in chrome if you remove this line!
                font-size: 0;
            }

            // The positioning is calculated in a way that ensures that the small space between
            // search field and X icon is the same in the top, right, and bottom dimensions.
            // Icon height is set in DpIcon.vue
            &-reset {
                $icon-height: 16px;
                top: calc(50% - (#{$icon-height} / 2));
                right: calc((#{$element-height} - #{$icon-height}) / 2);
            }

            &-reset--small {
                $icon-height: 12px;
                top: calc((#{$element-height} - #{$icon-height}) / 2);
                right: $inuit-base-spacing-unit--tiny;
            }
        }

        // Styles for the textarea element.
        // [1] Set a minimum height to disable resizing the textarea to a height smaller than input field height
        // [2] !important is used to override textarea default styling
        &-textarea {
            min-height: $element-height; // [1]
            border: $form-border-width solid $form-border-color !important; // [2]
            border-radius: $form-radius !important;

            &[disabled],
            &.is-disabled {
                background: $form-background-disabled !important;
                color: $form-color-disabled !important;
            }
        }


        &-tiptap {
            // Further styling may be found in DemosPlanCoreBundle/Resources/client/scss/components/_tiptap.scss
            & .editor {
                border-radius: $form-radius;

                & .menubar {
                    border-top-left-radius: $form-radius;
                    border-top-right-radius: $form-radius;
                }

                & .editor__content {
                    border-bottom-left-radius: $form-radius;
                    border-bottom-right-radius: $form-radius;
                }
            }
        }


        &-select {
            width: 100%;
            height: $element-height;

            padding: 3px 24px 3px 6px; // The right padding prevents text from running into the arrow icon
            border: $form-border-width solid $form-border-color !important;
            border-radius: $form-radius;

            cursor: pointer;

            // Currently the custom arrow can't change colors or orientation, but it might be possible if using
            // a different images on hover, focus, etc. the # in fill needs to be encoded as %23
            // In-depth article on svg in data-uri: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='320' height='512' viewBox='0 0 320 512'%3E%3Cpath fill='%23808080' d='M31 192h258c17 0 26 22 14 34L174 355c-8 8-20 8-28 0L17 226c-12-12-3-34 14-34z'/%3E%3C/svg%3E");
            background-color: $dp-color-white;
            background-size: 10px;
            background-position: right 10px center;
            background-repeat: no-repeat;

            color: $form-color;
            line-height: $form-lineheight;

            appearance: none;

            &[disabled],
            &.is-disabled {
                background: $form-background-disabled;
                color: $form-color-disabled;
            }

            &::-ms-expand {
                display: none;
            }
        }
    }


    // Used to horizontally lay out checkboxes or radios and their corresponding labels.
    &__element {
        &--checkbox {
            position: relative;

            > input[type='checkbox'] {
                position: absolute;
                top: .3em;
                left: 0;
                margin: 0;

                height: .9em;
                width: .9em;
            }

            > label,
            > .o-form__label {
                padding-left: $inuit-base-spacing-unit;
                word-break: break-word;
            }
        }

        &--radio {
            position: relative;

            > input[type='radio'] {
                position: absolute;
                top: .3em;
                left: 0;
                margin: 0;

                height: .9em;
                width: .9em;
            }

            > label,
            > .o-form__label {
                padding-left: $inuit-base-spacing-unit;
                word-break: break-word;
            }
        }
    }

    &__group {
        display: flex;
        align-items: flex-start;

        // Input elements share the available space equally by default
        > .o-form__group-item {
            flex-grow: 1;

            // Some input elements may not grow at all because they contain only a small amount
            // of characters (date inputs, zip code, street numbers and the like).
            &.shrink {
                flex-grow: 0;
            }

            // Some input elements may grow bigger than other items if their expected input
            // will have more characters than that of the other input elements of the group.
            &.grow {
                flex-grow: 2;
            }
        }

        // Items are automatically spaced vertically inside group.
        > .o-form__group-item + .o-form__group-item {
            margin-left: $inuit-base-spacing-unit--small;
        }

        // Inputs inside a group take up all available space unless they specify a size by attribute.
        // In that case, a distinct width is calculated based on that value. Since attr() does not
        // work for all properties atm, we have to hardcode sizes.
        // Note that with this implementation only one item inside a form group must have the `size` attr set.
        .o-form__control-input {
            &:not([size]) {
                flex-grow: 1;
            }

            // Zip Code and house numbers.
            // Although it is unrealistic to have a 5 digit house number, it would be confusing to have
            // two "small input" fields. Also, the label text for house number atm reads "Hausnr." in
            // german, which occupies more width then the [size='3'] field would render to. That is the
            // reason atm we have only one "small field".
            &[size='3'],
            &[size='5'] {
                width: calc(6ch + #{$inuit-base-spacing-unit--small});
            }

            // Telephone number.
            // Some day we may want to have field widths based on their expected input. For telephone
            // numbers, 16 characters is a typical range.
            &[size='16'] {
                width: calc(17ch + #{$inuit-base-spacing-unit--small});
            }
        }
    }
}
