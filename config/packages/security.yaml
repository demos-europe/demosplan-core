security:
    enable_authenticator_manager: true
    password_hashers:
        # salt handling differed from symfony, therefore we need a custom sha512 implementation
        customSha512:
            id: demosplan\DemosPlanCoreBundle\Security\Encoder\CustomSha512Encoder
        # Encoder may be used to easily reset passwords in database
        saltlessMd5:
            id: demosplan\DemosPlanCoreBundle\Security\Encoder\SaltlessMd5Encoder
        demosplan\DemosPlanCoreBundle\Entity\User\SecurityUser:
            algorithm: auto
            migrate_from:
                - customSha512
                - saltlessMd5
        demosplan\DemosPlanCoreBundle\Entity\User\User:
            algorithm: auto
            migrate_from:
                - customSha512
                - saltlessMd5
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        users_in_memory: { memory: null }
        in_memory:
            memory: ~

        dplan_default_user_provider:
            id: demosplan\DemosPlanCoreBundle\Security\Authentication\Provider\SecurityUserProvider
        # user provider for the AI (Planning Intelligence) API Integration
        ai_provider:
            id: demosplan\DemosPlanCoreBundle\Security\Authentication\Provider\AiApiUserProvider
        api_provider:
            id: demosplan\DemosPlanCoreBundle\Security\Authentication\Provider\ApiUserProvider
        saml_provider:
            id: demosplan\DemosPlanCoreBundle\Security\Authentication\Provider\SamlUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            provider: in_memory
        api_ai:
            pattern: ^/api/ai
            stateless: true
            provider: ai_provider
            jwt:
                authenticator: demosplan\DemosPlanCoreBundle\Security\Authentication\Authenticator\AiApiAuthenticator
        api_ai_auth_jwt:
            pattern: ^/api/ai/auth
            stateless: true
            provider: ai_provider
            json_login:
                check_path:      /api/ai/auth/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api/\d.+
            stateless: true
            provider: api_provider
            jwt:
                authenticator: demosplan\DemosPlanCoreBundle\Security\Authentication\Authenticator\ApiAuthenticator
        saml:
            pattern: ^/saml
            saml:
                provider: saml_provider
                # Match SAML attribute 'uid' with username.
                # Uses getNameId() method by default.
                username_attribute: ID
                # Use the attribute's friendlyName instead of the name
                use_attribute_friendly_name: false
                check_path: saml_acs
                login_path: saml_login
                failure_path: /dplan/login
                default_target_path: core_home_loggedin
                # avoid infinitive redirects
                always_use_default_target_path: true
                success_handler: demosplan\DemosPlanCoreBundle\Security\Authentication\SamlAuthenticationSuccessHandler
                user_factory: demosplan\DemosPlanCoreBundle\Security\User\SamlUserFactory
                persist_user: true
            logout:
                path: /saml/logout
        main:
            provider: dplan_default_user_provider
            lazy: true
            custom_authenticators: '%demosplan_user_authenticator_service%'
            entry_point: '%demosplan_user_authenticator_service_entry_point%'
            logout:
                path: DemosPlan_user_logout
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
