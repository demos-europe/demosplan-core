{% extends '@DemosPlanCore/DemosPlanCore/procedure.html.twig' %}

{% block demosplanbundlecontent %}

    {% set counties = templateVars.counties|map(c => { label: c.name, value: c.id }) %}

    {% block title_text %}
        {#  pageheader - display procedure title + nav link #}
        {% include '@DemosPlanCore/DemosPlanCore/includes/pageheader.html.twig' with
        {
            link: path('DemosPlan_procedure_public_detail', { 'procedure':procedure }),
            link_caption: 'procedure.goto'|trans,
            width_css: {
                col1: currentUser.loggedIn == true ? 'u-1-of-1' : 'u-1-of-5',
                col2: currentUser.loggedIn == true ? 'u-1-of-1' : 'u-4-of-5'
            },
            content_heading: "statements.grouprelease"|trans ~ ": " ~ getProcedureName(proceduresettings),
            content_subheading: '<p class="u-mb-0">' ~ "text.statements.grouprelease"|trans ~ "</p>"
        }
        %}
    {% endblock %}

    <dp-public-detail-no-map inline-template procedure-id="{{ procedure }}" user-id="{{ app.user.id|default }}">

    <div class="o-page__padded--spaced u-pv">

        <form
            data-dp-validate="releaseForm"
            novalidate
            id="sortform"
            class="layout cf"
            id="submitStatementsForm"
            action="{{ path('DemosPlan_statement_list_released_group', {'procedure': procedure}) }}"
            method="post">

            <input type="hidden" name="reject_reason" id="reject_reason" value="">
            <input type="hidden" name="statement_reject" id="statement_reject" value="">

            {#  filter fieldsets  #}
            {%  include '@DemosPlanStatement/DemosPlanStatement/includes/form_filter.html.twig'
                with  { 'filter_target'                         : 'released_group',
                        'show_filter_department'                : true,
                        'show_filter_sort_option_department'    : true } %}

            {# form controls above entry table #}
            <fieldset class="{{ 'u-ml u-pb-0_5 cf'|prefixClass }}">
                <input type="hidden" name="action" value="" id="js__action">

                {% if templateVars.list.statementlist|length > 0 %}
                    {% include '@DemosPlanStatement/DemosPlanStatement/includes/form_tools_mark-all.html.twig' %}

                    {% if hasPermission('feature_statements_released_group_submit') and templateVars.hasPermissionsetWrite == true %}

                    <dp-modal
                        content-classes="u-2-of-3"
                        ref="confirmModal"
                        aria-label="{{ "statements.marked.submit"|trans }}"
                        aria-modal='true'
                    >
                        <template v-slot:header>
                            {{ 'statements.marked.submit'|trans }}
                        </template>

                        <template v-slot:default>
                            {#  Hint and select for notifying country about statement being submitted #}
                            {% include '@DemosPlanStatement/DemosPlanStatement/includes/list_statement_nofity_contries.html.twig' with {
                                showDropdown: hasPermission('feature_statement_notify_counties') and proceduresettings.settings.sendMailsToCounties == true,
                                targetForm: 'releaseForm'
                            } %}
                        </template>
                    </dp-modal>

                    <button
                        type="button"
                        aria-label="{{ "statements.marked.submit"|trans }}"
                        @click.prevent="toggleConfirmModal"
                        data-cy="statementsMarkedSubmit"
                        class="btn btn--primary u-ml-0_5"
                    >
                        {{ "statements.marked.submit"|trans }}
                    </button>

                    {% endif %}

                    {% include '@DemosPlanStatement/DemosPlanStatement/includes/form_tools_print_pdf.html.twig' %}
                {% endif %}

            </fieldset>

            <dp-public-statement-list
                class="layout__item"
                :statements="JSON.parse('{{ templateVars.list.statementlist|default([])|json_encode|e('js', 'utf-8') }}')"
                :counties="JSON.parse('{{ counties|default([])|json_encode|e('js', 'utf-8') }}')"
                procedure-id="{{ templateVars.procedure|default('') }}"
                show-author
                show-checkbox
                show-edit
                show-email
                show-delete
                show-pdf-download
                show-reject
                target="released_group">
            </dp-public-statement-list>

        </form>

        <dp-map-modal
            ref="mapModal"
            procedure-id="{{ procedure }}"
        ></dp-map-modal>

        {% set counties = [{value: '', label: '---'}] %}
        {% for county in templateVars.counties|default([]) %}
            {%  set counties = counties|merge([{value: county.id, selected: county.id == templateVars.draftStatement.statementAttributes.county|default(), label: county.name }]) %}
        {% endfor %}

        {# grouped formFields for statement form #}
        {%  set statementFields = [] %}
        {%  set personalDataFields = [] %}
        {%  set feedbackFields = [] %}
        {% for field in templateVars.statementFormDefinition.fieldDefinitions|default([]) %}
            {% if field.enabled|default(false) %}
                {% set formField = {name: field.name|default, required: field.required|default(false)} %}
                {% if field.name == 'countyReference' or field.name == 'mapAndCountyReference' %}
                    {% set statementFields = statementFields|merge([formField]) %}
                {% elseif field.name == 'getEvaluationMailViaEmail' or field.name == 'getEvaluationMailViaSnailMailOrEmail' %}
                    {% set feedbackFields = feedbackFields|merge([formField]) %}
                {% else %}
                    {% set personalDataFields = personalDataFields|merge([formField]) %}
                {% endif %}
            {% endif %}
        {%  endfor %}

        <statement-modal
            ref="statementModal"
            current-page="draftList"
            ext-id="{{ templateVars.number|default }}"
            :logged-in="Boolean({{ currentUser.loggedIn }})"
            :statement-form-fields="JSON.parse('{{ statementFields|json_encode|e('js', 'utf-8') }}')"
            :personal-data-form-fields="JSON.parse('{{ personalDataFields|json_encode|e('js', 'utf-8') }}')"
            :feedback-form-fields="JSON.parse('{{ feedbackFields|json_encode|e('js', 'utf-8') }}')"
            :is-map-enabled="Boolean({{ proceduresettings.isMapEnabled }})"
            statement-form-hint-personal-data="{{ templateVars.procedureUiDefinition.statementFormHintPersonalData|default }}"
            statement-form-hint-recheck="{{ templateVars.procedureUiDefinition.statementFormHintRecheck|default }}"
            statement-form-hint-statement="{{ templateVars.procedureUiDefinition.statementFormHintStatement|default }}"
            procedure-id="{{ procedure }}"
            project-name="{{ projectName }}"
            init-redirect-path="DemosPlan_statement_list_released_group"
            :public-participation-publication-enabled="Boolean({{ proceduresettings.publicParticipationPublicationEnabled }})"
            :init-has-planning-documents="Boolean({{ templateVars.planningDocuments|default(true) }})"
            :planning-documents-has-negative-statement="Boolean({{ templateVars.planningDocumentsHasNegativeStatement|default(false) }})"
            :counties="JSON.parse('{{ counties|json_encode|e('js', 'utf-8') }}')"
            orga-id="{{ branding.orgaId|default }}"
            :form-options="JSON.parse('{{ templateVars.formOptions|default({})|json_encode|e('js', 'utf-8') }}')"
            :draft-statement="JSON.parse('{{ templateVars.draftStatement|default([])|json_encode|e('js', 'utf-8') }}')">
        </statement-modal>
    </div></dp-public-detail-no-map>

{% endblock %}


{% block javascripts %}
    {{ parent() }}
    {{ webpackBundle('statement-listReleasedGroup.js') }}
{% endblock javascripts %}

