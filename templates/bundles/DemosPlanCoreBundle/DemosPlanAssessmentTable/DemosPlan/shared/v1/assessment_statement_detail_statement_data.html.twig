{# @improve T12757 #}

{% set manualStatement = statement.manual %}

{# fields should be editable only if
    - it is a manual statement and
    - 'readonly' is false
#}
{% apply spaceless %}
<fieldset>
    <dp-accordion
        class="u-mt-0_75"
        data-cy="statementDetail:statementData"
        is-open
        title="{{ 'statement.data'|trans }}">
        <div class="o-box--dark u-ph u-pv-0_5">

            <h4 class="font-size-large">{{ "submitter.invitable_institution"|trans }}</h4>

            {# Submitted by #}
            {# editable if orga is institution #}
            {% if hasPermission('field_statement_meta_orga_name') %}
                {% block submitOrga %}
                    {% if statement.meta.orgaName is defined %}
                        {% set orgaNameClass = 'u-mb-0_25 u-pr-0_5' %}
                        {% if not readonly %}
                            {% if statement.isSubmittedByCitizen == false%}
                                {% set orgaNameValue = statement.meta.orgaName|default %}
                                {% set labelHint = 'institution.name' %}
                            {% elseif statement.isSubmittedByCitizen %}
                                {% if statement.meta.miscData.submitterRole|default == 'publicagency' %}
                                    {% set orgaNameValue = 'institution'|trans %}
                                {% else %}
                                    {% set orgaNameValue = 'role.citizen'|trans %}
                                {% endif %}
                                {% set orgaNameDisabled = true %}
                            {% endif %}
                        {% else %}
                            {% if statement.isSubmittedByCitizen == false %}
                                {% set orgaNameValue = statement.meta.orgaName|default('-') %}
                                {% set orgaNameDisabled = true %}
                            {% else %}
                                {% if statement.meta.miscData.submitterRole|default == 'publicagency' and statement.meta.orgaName == '' %}
                                    {% set orgaNameValue = 'institution'|trans %}
                                {% else %}
                                    {% set orgaNameValue = 'role.citizen'|trans %}
                                {% endif %}
                                {% set orgaNameDisabled = true %}
                            {% endif %}
                        {% endif %}
                        {% if statement.isSubmittedByCitizen == false%}
                            {% set orgaNameValue = statement.meta.orgaName|default %}
                            {% set labelHint = 'institution.name' %}
                        {% elseif statement.isSubmittedByCitizen %}
                            {% if statement.meta.miscData.submitterRole|default == 'publicagency' %}
                                {% set orgaNameValue = 'institution'|trans %}
                            {% else %}
                                {% set orgaNameValue = 'role.citizen'|trans %}
                            {% endif %}
                            {% set orgaNameDisabled = true %}
                        {% endif %}

                        {% if hasPermission('field_statement_meta_orga_department_name') and statement.isSubmittedByCitizen == false %}
                            {% set orgaNameStyle = 'inline-block' %}

                            {% if manualStatement and readonly %}
                                {% set orgaNameClass = orgaNameClass ~ ' align-middle' %}
                            {% endif %}
                        {% endif %}

                        {#
                            if a procedure has only guests as aprticipents, there can't be a confirmed organisation.
                            for that reason the input should not be displayed.
                            There is another orga-input field wich gets stored in the meta-data which ca be used by the FP instead
                         #}
                        {% if not participationGuestOnly|default(false) %}
                            {{ uiComponent('form.element', {
                                label: { text: 'submitted.author'|trans, hint: labelHint|default },
                                control: { name: 'r_submitterType', value: orgaNameValue },
                                type: 'text',
                                id: 'r_submitterType',
                                elementSize: 'large',
                                elementClass: orgaNameClass|default,
                                elementStyle: orgaNameStyle|default,
                                disabled: orgaNameDisabled|default(false),
                                attributes: ['data-cy=statementDetail:submitterType']
                            }) }}
                        {% endif %}
                    {% endif %}
                {% endblock submitOrga %}
            {% endif %}

            {# department #}
            {# editable only if not readonly #}
            {% if hasPermission('field_statement_meta_orga_department_name') %}
                {% if statement.isSubmittedByCitizen == false %}
                    {% if readonly %}
                        {% set departmentDisabled = true %}
                    {% endif %}

                    {{ uiComponent('form.element', {
                        label: { text: 'department'|trans },
                        control: { name: 'r_departmentName', value: statement.meta.orgaDepartmentName|default },
                        type: 'text',
                        id: 'r_departmentName',
                        elementSize: 'large',
                        elementStyle: 'inline-block',
                        elementClass: 'u-pl-0_5',
                        disabled: departmentDisabled|default(false),
                        attributes: ['data-cy=statementDetail:departmentName']
                    }) }}
                {% endif %}
            {% endif %}

            {# Submitted in the name of #}
            {# Not editable; only checkbox that representation has been checked is editable #}
            {% if statement.represents is defined and statement.represents != '' %}
                {% if statement.representationCheck %}
                    {% set representationChecked = true %}
                {% endif %}
                {% set representationCheckDisabled = readonly %}

                {{ uiComponent('form.row', {
                    elements: [
                        {
                            label: { text: 'statement.representation.assessment'|trans },
                            control: { value: statement.represents },
                            type: 'text',
                            id: 'statementRepresentation',
                            elementStyle: 'inline-block',
                            elementSize: 'large',
                            elementClass: 'u-pr-0_5',
                            disabled: true
                        },
                        {
                            label: { text: 'statement.representation.checked'|trans },
                            control: { name: 'r_representationCheck', checked: representationChecked|default(false) },
                            type: 'checkbox',
                            class: 'align-top',
                            id: 'r_representationCheck',
                            elementStyle: 'inline-block',
                            elementClass: 'u-pl-0_5',
                            elementSize: 'large',
                            disabled: representationCheckDisabled
                        },
                    ]
                }) }}
            {% endif %}

            {# submitter name #}
            {# editable only if not readonly #}
            {% if hasPermission('field_statement_meta_submit_name') and formDefinitions.name.enabled == true %}
                {% if readonly %}
                    {% set submittedAuthorDisabled = true %}
                {% endif %}
                <div class="u-1-of-2 inline-block u-pr-0_5">
                    {% block submitted_author_label %}
                        {% if statement.gdprConsent and statement.gdprConsent.consentRevoked %}
                            {% set submittedAuthorId = 'r_submit_name' %}
                        {% elseif statement.meta.submitName is defined and statement.meta.submitName != '' and statement.isSubmittedByCitizen == false %}
                            {% set submittedAuthorId = 'r_submit_name' %}
                        {% elseif  statement.meta.submitName is defined and statement.meta.submitName == '' and statement.isSubmittedByCitizen == false %}
                            {% set submittedAuthorId = 'r_author_name' %}
                        {% elseif statement.isSubmittedByCitizen %}
                            {% set submittedAuthorId = 'r_author_name' %}
                        {% endif %}

                        {{ uiComponent('form.label', {
                            id: submittedAuthorId,
                            text: 'name'|trans,
                            disabled: submittedAuthorDisabled|default(false)
                        }) }}
                    {% endblock submitted_author_label %}

                    {# if submitter has revoked the gdpr consent for this statement or statement has been anonymized #}
                    {% if (statement.gdprConsent and statement.gdprConsent.consentRevoked) or statement.original.submitterAndAuthorMetaDataAnonymized|default == true %}
                        {# if submitter has revoked gdpr consent #}
                        {% if statement.gdprConsent and statement.gdprConsent.consentRevoked %}
                            {% set helpText =  'personal.data.usage.revoked'|trans %}
                            {# if submitter has revoked gdpr consent and statement has been anonymized #}
                            {% if hasPermission('area_statement_anonymize') and statement.original.submitterAndAuthorMetaDataAnonymized|default == true %}
                                {% set helpText = helpText ~ '<br><br>' ~ 'statement.anonymized.submitter.data'|trans %}
                            {% endif %}
                        {# if statement has been anonymized #}
                        {% elseif hasPermission('area_statement_anonymize') and statement.original.submitterAndAuthorMetaDataAnonymized|default == true %}
                            {% set helpText = 'statement.anonymized.submitter.data'|trans %}
                        {% endif %}
                        <input type="text" id="r_submit_name" class="u-1-of-4 color--grey u-mb-0 weight--normal" value="{{ 'anonymized'|trans }}" disabled>
                        {% include '@DemosPlanCore/Extension/contextual_help.html.twig' with {
                            helpText: helpText,
                            cssClasses:'o-tooltip--wide'
                        } %}
                    {% else %}

                        {# if submitter is an orga and name has a value #}
                        {% if statement.meta.submitName is defined and statement.meta.submitName != '' and statement.isSubmittedByCitizen == false %}
                            {% set submittedAuthorId = 'r_submit_name' %}
                            {% set submittedAuthorValue = statement.meta.submitName %}

                        {# if submitter is an orga and submitName is empty, display authorName #}
                        {% elseif statement.meta.submitName is defined and statement.meta.submitName == '' and statement.isSubmittedByCitizen == false %}
                            {% set submittedAuthorId = 'r_author_name' %}
                            {% set submittedAuthorValue = statement.meta.authorName|default %}

                        {# if submitter is a citizen #}
                        {% elseif statement.isSubmittedByCitizen %}
                            {% set submittedAuthorId = 'r_author_name' %}
                            {% set submittedAuthorValue = statement.meta.authorName|default('anonymous'|trans) %}
                        {% endif %}

                        {% if not readonly or not manualStatement %}
                            {% set submittedAuthorClass = 'u-mb-0_5' %}
                        {% endif %}
                        {{ uiComponent('form.input.text', {
                            id: submittedAuthorId,
                            name: submittedAuthorId,
                            class: submittedAuthorClass|default,
                            value: submittedAuthorValue,
                            disabled: submittedAuthorDisabled|default(false),
                            attributes: ['data-cy=statementDetail:' ~ submittedAuthorId]
                        }) }}
                    {% endif %}
                </div>
            {% endif %}

            {# email address #}
            {# editable if manual statement #}
            {% if hasPermission('field_statement_submitter_email_address') and (formDefinitions.emailAddress.enabled == true or formDefinitions.phoneOrEmail.enabled == true) or manualStatement %}

                {# set styling for submitterEmailAddress uiComponent, should be moved to component #}
                {% set submitterEmailAddressClass = 'u-mb-0_5' %}
                {% if (not hasPermission('field_statement_meta_address'))
                    or (not hasPermission('field_statement_meta_orga_department_name')) %}
                    {% set submitterEmailAddressStyle = 'block' %}
                    {% set submitterEmailAddressClass = submitterEmailAddressClass ~ ' u-pr-0_5' %}
                {% else %}
                    {% set submitterEmailAddressStyle = 'inline-block' %}
                    {% set submitterEmailAddressClass = submitterEmailAddressClass ~ ' u-pl-0_5' %}
                {% endif %}

                {# set value for submitterEmailAdress, see T10993#231880 for details about possible values #}
                {% if manualStatement and not readonly %}
                    {# show email address for manual statements #}
                    {% set submitterEmailAddressValue = statement.submitterEmailAddress %}
                {% elseif readonly and manualStatement or not manualStatement %}
                    {# disable input #}
                    {% set submitterEmailAddressDisabled = true %}
                    {% if statement.anonymous == true %}
                        {% set submitterEmailAddressValue = 'email.address.notavailable.anonymous'|trans %}
                    {% elseif statement.submitterEmailAddress is defined and statement.submitterEmailAddress|trim is not empty %}
                        {% set submitterEmailAddressValue = statement.submitterEmailAddress %}
                    {% elseif statement.submitterEmailAddress is not defined %}
                        {% set submitterEmailAddressValue = 'email.address.notavailable.undefined'|trans %}
                    {% elseif statement.submitterEmailAddress|trim is empty %}
                        {% if manualStatement %}
                            {% set submitterEmailAddressValue = 'email.address.notprovided.manual'|trans %}
                        {% else %}
                            {% set submitterEmailAddressValue = 'email.address.notprovided.notmanual'|trans %}
                        {% endif %}
                    {% else %}
                        {# show the email address in other cases #}
                        {% set submitterEmailAddressValue = statement.submitterEmailAddress %}
                    {% endif %}
                {% endif %}

                {{ uiComponent('form.element', {
                    label: { text: 'email.address'|trans },
                    control: { name: 'r_submitterEmailAddress', value: submitterEmailAddressValue },
                    type: 'text',
                    id: 'r_submitterEmailAddress',
                    elementSize: 'large',
                    elementStyle: submitterEmailAddressStyle|default,
                    elementClass: submitterEmailAddressClass|default,
                    disabled: submitterEmailAddressDisabled|default(false),
                    attributes: ['data-cy=statementDetail:submitterEmailAddress']
                }) }}
            {% endif %}

            {% if formDefinitions.phoneNumber.enabled == true or formDefinitions.phoneOrEmail.enabled == true %}
                {{ uiComponent('form.element', {
                    label: { text: 'statement.fieldset.phoneNumber'|trans },
                    control: { name: 'r_phone', value: statement.meta.miscData.userPhone|default(readonly ? '-' : ''), pattern: '^(\\+?)(-| |[0-9]|\\(|\\))*$' },
                    type: 'tel',
                    id: 'r_phone',
                    elementSize: 'large',
                    elementClass: 'u-mb-0_5',
                    disabled: not manualStatement or readonly
                }) }}
            {% endif %}

            {# additional user fields: userState, userGroup, userOrganisation, userPosition #}
            {# not editable #}
            {% if hasPermission('field_statement_user_state') and templateVars.formOptions.userState|default %}
                <div class="layout--flush u-mb-0_75">
                    <label
                        for="r_userState"
                        class="layout__item u-1-of-4 block u-mb-0_25">
                        {{ 'state'|trans }}
                    </label>
                    {% for userState in templateVars.formOptions.userState %}
                        {% if userState == statement.meta.miscData.userState|default %}
                            <input
                                type="text"
                                id="r_userState"
                                class="layout__item u-3-of-4"
                                value="{{ userState }}"
                                disabled>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}

            {% if hasPermission('field_statement_user_group') and templateVars.formOptions.userGroup|default %}
                <div class="layout--flush u-mb-0_75">
                    <label
                        for="r_userGroup"
                        class="layout__item u-1-of-4 block u-mb-0_25">
                        {{ 'group'|trans }}
                    </label>
                    {% for userGroup in templateVars.formOptions.userGroup|default([])|filter(userGroup => userGroup == statement.meta.miscData.userGroup|default) %}
                        <input
                            type="text"
                            class="layout__item u-3-of-4"
                            id="r_userGroup"
                            value="{{ userGroup }}"
                            disabled>
                    {% endfor %}
                </div>
            {% endif %}

            {% if hasPermission('field_statement_user_organisation') and formDefinitions.citizenXorOrgaAndOrgaName.enabled == true %}
                {{ uiComponent('form.element', {
                    label: { text: 'institution.represents'|trans, hint: 'organisation.name.not.checked'|trans },
                    control: { value: statement.meta.miscData.userOrganisation|default },
                    type: 'text',
                    elementSize: 'large',
                    elementClass: 'u-pr-0_5 u-mb-0_5',
                    id: 'r_userOrganisation',
                    name: 'r_userOrganisation',
                    disabled: not manualStatement or readonly
                }) }}
            {% endif %}

            {% if hasPermission('field_statement_user_position') and templateVars.formOptions.userPosition|default %}
                <div class="layout--flush u-mb-0_75">
                    <label class="layout__item u-1-of-4 block u-mb-0_25">
                        {{ 'position'|trans }}
                    </label>
                    {% for userPosition in templateVars.formOptions.userPosition %}
                        {% if userPosition == statement.meta.miscData.userPosition|default %}
                            <span class="layout__item u-3-of-4">{{ userPosition }}</span>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}

            {% block address %}
                {# Address block is not shown if it's postalcode is empty #}
                {# editable if not readonly #}
                {% if hasPermission('field_statement_meta_address') %}

                    {% set streetValue = statement.meta.orgaStreet|default %}
                    {% set houseNumberValue = statement.meta.houseNumber|default %}
                    {% set postalCodeValue = statement.meta.orgaPostalCode|default %}
                    {% set cityValue = statement.meta.orgaCity|default %}

                    {% if readonly %}
                        {# disable input fields #}
                        {% set houseNumberDisabled = true %}
                        {% set streetDisabled = true %}
                        {% set postalCodeDisabled = true %}
                        {% set cityDisabled = true %}

                        {# if any of these is empty, set value to '-' #}
                        {% if statement.meta.orgaStreet|default == '' %}
                            {% set streetValue = '-' %}
                        {% endif %}

                        {% if statement.meta.houseNumber|default == '' %}
                            {% set houseNumberValue = '-' %}
                        {% endif %}

                        {% if statement.meta.orgaPostalCode|default == '' %}
                            {% set postalCodeValue = '-' %}
                        {% endif %}

                        {% if statement.meta.orgaCity|default == '' %}
                            {% set cityValue = '-' %}
                        {% endif %}
                    {% endif %}


                    <div class="u-1-of-1">
                      {% if hasPermission('field_statement_meta_street') and (formDefinitions.streetAndHouseNumber.enabled == true or formDefinitions.street.enabled == true) %}
                        <div class="u-mb-0_75 u-1-of-2 u-pr-0_5 inline-block">
                            {{ uiComponent('form.element', {
                                label: { text: 'street'|trans },
                                control: { name: 'r_orga_street', value: streetValue },
                                type: 'text',
                                id: 'r_orga_street',
                                elementClass: 'u-5-of-6 u-pr-0_5',
                                elementStyle: 'inline-block',
                                disabled: streetDisabled|default(false),
                                attributes: ['data-cy=statementDetail:orgaStreet']
                            }) }}

                            {% if formDefinitions.streetAndHouseNumber.enabled == true %}
                                {{ uiComponent('form.element', {
                                    label: { text: 'street.number.short'|trans },
                                    control: { name: 'r_houseNumber', value: houseNumberValue },
                                    type: 'text',
                                    id: 'r_houseNumber',
                                    elementSize: 'tiny',
                                    elementStyle: 'inline-block',
                                    disabled: houseNumberDisabled|default(false),
                                    attributes: ['data-cy=statementDetail:houseNumber']
                                }) }}
                            {% endif %}
                        </div>
                      {% endif %}
                    {% if formDefinitions.postalAndCity.enabled == true %}
                        <div class="u-1-of-2 u-mb-0_5 {% if (((readonly or not manualStatement) and statement.meta.orgaStreet|default != '') or (manualStatement and not readonly and statement.meta.orgaStreet|default != '')) and hasPermission('field_statement_meta_street')%}u-pl-0_5{% else %}u-pr-0_25{% endif %} inline-block">
                            {{ uiComponent('form.element', {
                                label: { text: 'postalcode'|trans },
                                control: { name: 'r_orga_postalcode', value: postalCodeValue, pattern: readonly or not manualStatement ? '' : '^[0-9]{4,5}$' },
                                type: 'text',
                                id: 'r_orga_postalcode',
                                elementStyle: 'inline-block',
                                elementSize: 'tiny',
                                disabled: postalCodeDisabled|default(false),
                                attributes: ['data-cy=statementDetail:orgaPostalcode']
                            }) }}

                            {% set cityClasses = 'u-5-of-6 u-pl-0_5' %}
                            {% if not hasPermission('field_statement_meta_street') or formDefinitions.streetAndHouseNumber.enabled == false or formDefinitions.street.enabled == false %}
                                {% set cityClasses = cityClasses ~ ' u-pr-0_25' %}
                            {% endif %}

                            {{ uiComponent('form.element', {
                                label: { text: 'city'|trans },
                                control: { name: 'r_orga_city', value: cityValue },
                                type: 'text',
                                id: 'r_orga_city',
                                elementStyle: 'inline-block',
                                elementClass: cityClasses,
                                disabled: cityDisabled|default(false),
                                attributes: ['data-cy=statementDetail:orgaCity']
                            }) }}
                        </div>
                        {% endif %}
                     </div>
                {% endif %}
            {% endblock address %}

            {% if hasPermission('field_statement_feedback') and (formDefinitions.getEvaluationMailViaEmail.enabled == true or formDefinitions.getEvaluationMailViaSnailMailOrEmail.enabled == true) %}
                {# Show only for citizen-statements #}
                {# not editable #}
                {% if statement.isSubmittedByCitizen %}
                    {% if statement.feedback is defined and statement.feedback|default != '' %}
                            {{ uiComponent('form.element', {
                                label: { text: 'feedback'|trans },
                                control: { value: statement.feedback },
                                type: 'text',
                                elementSize: 'small',
                                elementClass: 'u-mb-0_5',
                                id: 'r_feedback',
                                disabled: true
                            }) }}
                    {% endif %}
                {% endif %}
            {% endif %}

            {% block auhtorMisc %}
                {% if statement.externId is defined and statement.isSubmittedByCitizen == false %}
                    {% if 'M' in statement.externId and templateVars.sendFinalEmail == false %}
                        {{ uiComponent('form.row', {
                            elements: [
                                {
                                    label: { text: 'author.misc'|trans },
                                    control: { value: 'statement.final.send.postal'|trans },
                                    type: 'text',
                                    id: 'sendFinalEmail',
                                    elementSize: 'large',
                                    elementStyle: 'inline-block',
                                    elementClass: 'u-pr-0_5',
                                    disabled: true
                                }
                            ]
                        }) }}
                    {% endif %}
                {% endif %}
            {% endblock auhtorMisc %}

            {# Publishing #}
            {% if hasPermission('field_statement_public_allowed') %}
                <h4 class="font-size-large u-pt-0_5 border--top">
                    {% if hasPermission('field_statement_votes') %}
                        {{ 'publication.and.voters'|trans }}
                    {% elseif hasPermission('feature_statements_like') %}
                        {{ 'publication.and.likers'|trans }}
                    {% else %}
                        {{ 'publish'|trans }}
                    {% endif %}
                </h4>

                {% if statement.procedure.publicParticipationPublicationEnabled %}
                    <div class="layout--flush u-mb">
                        <label class="layout__item u-1-of-2 block u-mb-0_25">
                            {{ "publish.on.platform"|trans }}
                        </label>
                        {% if statement.publicAllowed or manualStatement %}
                            <a
                                href="#statementPublish"
                                class="u-pl-0"
                                @click="openStatementPublish">
                                {{ statement.publicVerifiedTranslation|trans }}
                            </a>
                        {% elseif statement.isSubmittedByCitizen %}
                            {{ "warning.statement.not.public_allowed.or.manual.privat"|trans }}
                        {% else %}
                            {{ "warning.statement.not.public_allowed.or.manual.invitable_institution"|trans }}
                        {% endif %}
                    </div>
                {%  else %}
                    <p>
                        {{ "procedure.statement.publication.disabled"|trans }}
                    </p>
                {% endif %}
            {% endif %}

            {# Voters #}
            {% if hasPermission('field_statement_votes') and statement.publicAllowed %}

                <div class="layout--flush u-mb">
                    {% include '@DemosPlanCore/DemosPlanStatement/includes/vote_statement_messages.html.twig' %}
                </div>
                {% if hasPermission('feature_statements_vote') %}
                    {# Voters are only relevant if statement is published or somebody already voted for it #}
                    {% if ( 'publication_approved' == statement.publicVerified|default
                        or statement.votes|default([])|length > 0
                        or statement.numberOfAnonymVotes|default(0) > 0)
                    %}

                        <div class="layout--flush u-mb">
                            <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                {{ "statement.voter"|trans }}
                            </strong>
                            <div class="layout__item u-3-of-4">
                                <a
                                    href="#statementVotersId"
                                    class="u-pl-0"
                                    @click="openStatementVoters">
                                    {% set votes = statement.votes|length|default(0) + statement.numberOfAnonymVotes|default(0) %}
                                    {{ votes }}
                                    {% if votes == 1 %}
                                        {{ 'person'|trans }}
                                    {%  else  %}
                                        {{ 'persons'|trans }}
                                    {% endif %}
                                </a>
                            </div>
                        </div>
                    {% endif %}
                {% endif %}

            {% endif %}

            {% if hasPermission('feature_statements_like') %}
                <div class="layout--flush u-mb">
                    <strong class="layout__item u-1-of-4 block u-mb-0_25">
                        {{ "liked.by"|trans }}
                    </strong>
                    <span class="layout__item u-3-of-4">
                        {% set likes = statement.likes|default([])|length %}
                        {{ likes }}
                        {% if likes == 1 %}
                            {{ 'person'|trans }}
                        {% else %}
                            {{ 'persons'|trans }}
                        {% endif %}
                    </span>
                </div>
            {% endif %}

            <div id="item_{% if statement.ident is defined %}{{ statement.ident }}{% endif %}">

                <h4 class="font-size-large u-mt u-pt-0_5 border--top">{{ 'statement'|trans }}</h4>

                {% set externIdRowElements = {} %}

                {# Statement Id #}
                {# Not editable #}
                {% if hasPermission('field_statement_extern_id') %}

                    {% set externIdValue = statement.externId|default %}
                    {% if statement.original.ident is defined and statement.parent.ident is defined %}
                        {% if statement.original.ident != statement.parent.ident and statement.parent.ident is not null%}
                            {% set externIdValue = 'copyof'|trans ~ ' ' ~  statement.externId %}
                        {% endif %}
                    {% endif %}

                    {% set externIdRowElements = externIdRowElements|merge([{
                        label: { text: 'id'|trans },
                        control: { value: externIdValue },
                        type: 'text',
                        id: 'r_extern_id',
                        elementSize: 'small',
                        elementStyle: 'inline-block',
                        elementClass: 'u-pr-0_5',
                        disabled: true
                    }]) %}
                {% endif %}

                {# Procedure name #}
                {# not editable #}
                {% if hasPermission('field_procedure_name') %}
                    {% set externIdRowElements = externIdRowElements|merge([{
                        label: { text: 'procedure'|trans },
                        control: { value: templateVars.table.procedure.name|default },
                        type: 'text',
                        id: 'r_procedure_name',
                        elementSize: 'large',
                        elementStyle: 'inline-block',
                        elementClass: 'u-pr-0_5',
                        disabled: true
                    }]) %}
                {% endif %}

                {{ uiComponent('form.row', {
                    elements: externIdRowElements
                }) }}

                {# Procedure phase
                   editable if not readonly
                   display internal phases if submitter is not a citizen, otherwise display external phases
                #}
                {% if hasPermission('field_statement_phase') %}
                    {% set procedurePhaseOptGroups = {} %}
                    {% set procedurePhaseOptions = {} %}

                    {% if readonly %}
                        {# disable select #}
                        {% set procedurePhaseSelectDisabled = true %}

                        {# set selected option #}
                        {% set procedurePhaseOptions = procedurePhaseOptions|merge([{
                            label: statement.phase,
                            value: '',
                            selected: true
                        }]) %}

                        {% set procedurePhaseControlOptions = { name: 'r_phase', options: procedurePhaseOptions } %}

                    {% else %}
                        {# set all options for optgroups only for edit-mode #}
                        {% if statement.isSubmittedByCitizen == false %}
                            {% set phases = templateVars.internalPhases|default %}
                        {% else %}
                            {% set phases = templateVars.externalPhases|default %}
                        {% endif %}

                        {% for phase in phases %}
                            {% if phase.name == statement.phase %}
                                {% set procedurePhaseOptions = procedurePhaseOptions|merge([{
                                    label: phase.name,
                                    value: phase.key,
                                    selected: true
                                }]) %}
                                {% set phaseFound = true %}
                            {% else %}
                                {% set procedurePhaseOptions = procedurePhaseOptions|merge([{
                                    label: phase.name,
                                    value: phase.key
                                }]) %}
                            {% endif %}
                        {% endfor %}

                        {% set procedurePhaseControlOptions = { name: 'r_phase', options: procedurePhaseOptions } %}
                    {% endif %}
                    {{ uiComponent('form.row', {
                        elements: [
                            {
                                label: { text: 'procedure.public.phase'|trans },
                                control: procedurePhaseControlOptions,
                                type: 'select',
                                id: 'Phase',
                                elementSize: 'large',
                                elementClass: 'u-pr-0_5',
                                disabledPlainText: true,
                                disabled: procedurePhaseSelectDisabled|default(false),
                                attributes: ['data-cy=statementDetail:Phase']
                            }
                        ]
                    }) }}
                {% endif %}

                {# elements for form.row component are merged into this object: date authored, date submitted and submit type #}
                {% set authorDateRowElements = {} %}

                {# date submitted - editable if not readonly #}
                {% if readonly %}
                    {% set submitDateDisabled = true %}
                {% endif %}

                {# date authored #}
                {# editable if not readonly #}
                {% if statement.meta.authoredDate is defined %}
                    {% if readonly %}
                        {% set authoredDateDisabled = true %}
                    {% endif %}
                    {% if statement.meta.authoredDate|dplanDate() != '' %}
                        {% set authoredDateValue = statement.meta.authoredDate|default()|dplanDate() %}
                    {% elseif statement.meta.authoredDate|dplanDate() == '' and readonly %}
                        {% set authoredDateValue = '-' %}
                    {% elseif statement.meta.authoredDate|dplanDate() == '' and not readonly%}
                        {% set authoredDateValue = '' %}
                    {% endif %}

                    {% set authorDateRowElements = authorDateRowElements|merge([{
                        label: { text: 'statement.date.authored'|trans },
                        control: {
                            name: 'r_authored_date',
                            value: authoredDateValue,
                            calendarsBefore: 2,
                            class: 'u-5-of-6 o-form__control-wrapper',
                            dataCy: 'statementDetail:authoredDate',
                            maxDate: 'now'|date('d.m.Y')
                        },
                        type: submitDateDisabled|default(false) ? 'text' : 'datepicker',
                        id: 'r_authored_date',
                        elementSize: 'small',
                        elementStyle: 'inline-block',
                        disabled: submitDateDisabled|default(false)
                    }]) %}
                {% endif %}

                {% set authorDateRowElements = authorDateRowElements|merge([{
                    label: { text: 'statement.date.submitted'|trans },
                    control: {
                        name: 'r_submitted_date',
                        value:
                        statement.submit|default()|dplanDate(),
                        calendarsBefore: 2,
                        maxDate: 'now'|date('d.m.Y'),
                        class: 'u-5-of-6 o-form__control-wrapper',
                        dataCy: 'statementDetail:submittedDate'
                    },
                    type: submitDateDisabled|default(false) ? 'text' : 'datepicker',
                    id: 'r_submitted_date',
                    elementSize: 'small',
                    elementStyle: 'inline-block',
                    disabled: submitDateDisabled|default(false)
                }]) %}

                {# show submit type, if feature is set and value differs from 'system' (-> manual statement) #}
                {# editable only if not readonly #}
                {% if hasPermission('field_statement_submit_type') %}
                    {% set submitTypeSelectOptions = {} %}
                    {% if readonly %}
                        {% set submitTypeSelectDisabled = true %}

                        {% for value, label in getFormOption('statement_submit_types.values', true) %}
                            {% if value == statement.submitType %}
                                {% set submitTypeSelectOptions = submitTypeSelectOptions|merge([{ label: label, value: value, selected: true }]) %}
                            {% endif %}
                        {% endfor %}

                    {% else %}
                        {# the default option is skipped in this case, since it is the value for "system" (submitted
                          by using the platform), which is no valid value for a manual statement #}
                        {% for value, label in getFormOption('statement_submit_types.values', true)|filter(value => value != 'system') %}
                            {% if value != statement.submitType %}
                                {% set submitTypeSelectOptions = submitTypeSelectOptions|merge([{ label: label, value: value }]) %}
                            {% else %}
                                {% set submitTypeSelectOptions = submitTypeSelectOptions|merge([{ label: label, value: value, selected: true }]) %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}

                    {% set authorDateRowElements = authorDateRowElements|merge([{
                        label: { text: 'submit.type'|trans },
                        control: { name: 'r_submit_type', options: submitTypeSelectOptions|default },
                        type: 'select',
                        id: 'r_submit_type',
                        elementSize: 'small',
                        elementStyle: 'inline-block',
                        disabledPlainText: true,
                        disabled: submitTypeSelectDisabled|default(false),
                        attributes: ['data-cy=statementDetail:submitType']
                    }]) %}
                {% endif %}

                {{ uiComponent('form.row', {
                    elements: authorDateRowElements
                }) }}

                <div class="u-mb-0_75">
                    {# Edit status #}
                    {# Editable for all statements, not just manual ones #}
                    {% if hasPermission('field_statement_status') %}
                        {% set processingStatusOptions = {} %}
                        {% for value, label in templateVars.statusValues|default([]) %}
                            {% if statement.status|default != value %}
                                {% set processingStatusOptions = processingStatusOptions|merge([{ label: label, value: value }]) %}
                            {% else %}
                                {% set processingStatusOptions = processingStatusOptions|merge([{ label: label, value: value, selected: true }]) %}
                            {% endif %}
                        {% endfor %}

                        {% if readonly %}
                            {% set processingStatusDisabled = true %}
                        {% endif %}

                        {{ uiComponent('form.element', {
                            label: { text: 'processing.status'|trans },
                            control: { name: 'r_status', options: processingStatusOptions },
                            type: 'select',
                            id: 'r_status',
                            elementSize: 'medium',
                            elementClass: 'u-pr',
                            elementStyle: 'inline-block',
                            disabledPlainText: true,
                            disabled: processingStatusDisabled|default(false),
                            attributes: ['data-cy=statementDetail:status']
                        }) }}
                    {% endif %}

                    {# Priority #}
                    {# Editable for all statements, not just manual ones #}
                    {% block priority %}
                        {% if hasPermission('field_statement_priority') %}

                            {% if readonly %}
                                {% set prioritySelectDisabled = true %}
                            {% endif %}
                            {% set prioritySelectOptions = {} %}
                            {# add empty option #}
                            {% if statement.priority is defined and statement.priority == '' %}
                                {% if manualStatement and not readonly %}
                                    {% set prioritySelectOptions = prioritySelectOptions|merge([{ label: '', value: '', selected: true }]) %}
                                {% elseif not manualStatement or readonly %}
                                    {% set prioritySelectOptions = prioritySelectOptions|merge([{ label: '-', value: '', selected: true }]) %}
                                {% endif %}
                            {% elseif statement.priority|default != '' %}
                                {% set prioritySelectOptions = prioritySelectOptions|merge([{ label: '', value: '' }]) %}
                            {% endif %}

                            {% for value, label in templateVars.priorityValues|default([]) %}
                                {% if statement.priority|default != value %}
                                    {% set prioritySelectOptions = prioritySelectOptions|merge([{ label: label, value: value }]) %}
                                {% else %}
                                    {% set prioritySelectOptions = prioritySelectOptions|merge([{ label: label, value: value, selected: true }]) %}
                                {% endif %}
                            {% endfor %}

                            {{ uiComponent('form.element', {
                                label: { text: 'priority'|trans },
                                control: { name: 'r_priority', options: prioritySelectOptions },
                                type: 'select',
                                id: 'r_priority',
                                elementSize: 'tiny',
                                elementStyle: 'inline-block',
                                elementClass: 'u-pr',
                                disabledPlainText: true,
                                disabled: prioritySelectDisabled|default(false),
                                attributes: ['data-cy=statementDetail:priority']
                            }) }}
                        {% endif %}
                    {% endblock priority %}
                </div>

                <div class="block u-1-of-1-desk-down u-1-of-2-desk-up">
                    {# intern id #}
                    {# not editable #}
                    {% if hasPermission('field_statement_intern_id') %}
                        {% if statement.internId is defined %}
                            {{ uiComponent('form.element', {
                                label: { text: 'internId'|trans },
                                control: { value: statement.internId|default('-') },
                                type: 'text',
                                id: 'r_internId',
                                elementSize: 'large',
                                elementStyle: 'inline-block',
                                elementClass: 'u-pr-0_5',
                                disabled: true
                            }) }}
                        {% endif %}
                    {% endif %}

                    {# Caseworker #}
                    {# not editable / always disabled #}
                    {% if hasPermission('field_statement_meta_case_worker_name') %}
                        <div class="layout--flush {% if hasPermission('feature_statement_cluster') %}u-mb-0_75{% endif %} inline-block u-1-of-1">
                            {% block official_label %}
                                {{ uiComponent('form.label', {
                                    id: 'caseWorkerName',
                                    text: 'official'|trans,
                                    disabled: true
                                }) }}
                            {% endblock official_label %}

                            {% if statement.meta.caseWorkerName|default != '' %}
                                {% set caseWorkerValue = statement.meta.caseWorkerName|default %}
                            {% else %}
                                {% set caseWorkerValue = '-' %}
                            {% endif %}

                            {% if hasPermission('feature_statement_cluster') %}
                                {% set caseWorkerInputClass = 'u-mb-0_5' %}
                            {% endif %}

                            {{ uiComponent('form.input.text', {
                                type: 'text',
                                id: 'caseWorkerName',
                                size: 'large',
                                class: caseWorkerInputClass|default,
                                value: caseWorkerValue,
                                disabled: true
                            }) }}
                        </div>
                    {% endif %}
                </div>

                {# Group/Cluster #}
                {# editable for all statements, not just manual ones #}
                {% if hasPermission('feature_statement_cluster') %}
                    <div class="layout--flush">
                        <strong class="layout__item block u-mb-0_25">
                            {{ "statement.add.to.cluster"|trans }}
                        </strong>

                        {% if not readonly %}
                            <label class="layout__item u-3-of-4 u-mb-0">

                                {% set clusters = [] %}
                                {% if templateVars.table.procedure.clusterStatements is defined %}
                                    {% for key, clusterStatement in templateVars.table.procedure.clusterStatements %}
                                        {% set assignee = {'id': clusterStatement.assignee.id|default(''), 'name': clusterStatement.assignee.firstname|default('') ~ ' ' ~ clusterStatement.assignee.lastname|default(''), 'organisation': clusterStatement.assignee.orgaName|default('') } %}
                                        {% set clusterStatement = {'id': clusterStatement.id|default(''), 'externId': clusterStatement.externId|default(''), 'assignee': assignee, 'name': clusterStatement.name|default } %}
                                        {% set clusters = clusters|merge([clusterStatement]) %}
                                    {% endfor %}
                                {% endif %}

                                {% set user = currentUser %}
                                {% set username = user.firstName ~ ' ' ~ user.lastName %}

                                <dp-select-statement-cluster
                                    :init-cluster-list="JSON.parse('{{ clusters|default([])|json_encode|e('js', 'utf-8') }}')"
                                    init-selected-cluster="{{ templateVars.table.statement.headStatement.id|default('') }}"
                                    current-user-id="{{ user.id }}"
                                    current-user-name="{{ username }}"
                                    procedure-id="{{ templateVars.table.procedure.id|default }}"
                                    :ignore-last-claimed="true"
                                ></dp-select-statement-cluster>
                            </label>
                            {# if not editable #}
                        {% else %}
                            <span class="layout__item u-3-of-4 u-mb-0_75 color--grey">{{ templateVars.table.statement.headStatement|default('statements.group.not.selected'|trans) }}</span>
                        {% endif %}
                    </div>
                {% endif %}

                {# Documents #}
                {# Editable for all statements, not just manual ones #}
                {% if hasPermission('field_procedure_elements') %}
                    <h4 class="font-size-large u-mt u-pt-0_5 border--top">
                        {{ 'documents'|trans }}
                    </h4>

                    <div class="u-1-of-2 inline-block">
                        {% if statement.element.ident is defined %}
                            {{ uiComponent('form.element', {
                                label: { text: 'plandocument'|trans },
                                control: { value: statement.element.title|default },
                                type: 'text',
                                id: 'elementTitle',
                                elementClass: 'u-mb-0_25',
                                disabled: true
                            }) }}
                            {% if not readonly %}
                                {{ uiComponent('form.element', {
                                    label: { text: 'delete'|trans },
                                    control: { name: 'r_delete_element', value: '1' },
                                    type: 'checkbox',
                                    elementClass: 'u-mb-0_5',
                                    id: 'r_delete_element',
                                    attributes: ['data-cy=statementDetail:deleteElement']
                                }) }}
                            {% endif %}

                            {% if statement.document.ident is defined and hasPermission('field_procedure_documents')%}
                                {{ uiComponent('form.element', {
                                    label: { text: 'file'|trans },
                                    control: { value: statement.document.title|default },
                                    type: 'text',
                                    id: 'fileTitle',
                                    elementClass: 'u-mb-0_25',
                                    disabled: true
                                }) }}
                                {% if not readonly %}
                                    {{ uiComponent('form.element', {
                                        label: { text: 'delete'|trans },
                                        control: { name: 'r_delete_document', value: '1' },
                                        type: 'checkbox',
                                        elementClass: 'u-mb-0_5',
                                        id: 'r_delete_document'
                                    }) }}
                                {% endif %}
                            {% endif %}

                            {% if statement.paragraph.ident is defined and hasPermission('field_procedure_paragraphs') %}
                                {{ uiComponent('form.element', {
                                    label: { text: 'paragraph'|trans },
                                    control: { value: statement.paragraph.title|striptags|default },
                                    type: 'text',
                                    id: 'paragraphTitle',
                                    elementClass: 'u-mb-0_25',
                                    disabled: true
                                }) }}

                                {% if not readonly %}
                                    {{ uiComponent('form.element', {
                                        label: { text: 'delete'|trans },
                                        control: { name: 'r_delete_paragraph', value: '1' },
                                        type: 'checkbox',
                                        elementClass: 'u-mb-0_5',
                                        id: 'r_delete_paragraph'
                                    }) }}
                                {% endif %}
                            {% endif %}
                        {% else %} {# if statement.element.ident is not defined #}
                            {{ uiComponent('form.element', {
                                label: { text: 'plandocument'|trans },
                                control: { value: 'document.none.selected'|trans },
                                type: 'text',
                                id: 'noPlandocument',
                                elementSize: 'large',
                                elementStyle: 'inline-block',
                                elementClass: 'u-mb-0_5',
                                disabled: true
                            }) }}
                        {% endif %}{# end if statement.element.ident is defined #}

                        {# plandocuments of fragments #}
                        {% set fragmentElementsListWrapperStart = '<ul class="u-ml u-mb-0">' %}
                        {% set fragmentElementsListWrapperEnd = '</ul>' %}
                        {% set fragmentElementsListWrapper = fragmentElementsListWrapperStart ~ fragmentElementsListWrapperEnd %}
                        {% set fragmentElementsList = fragmentElementsListWrapperStart %}
                        {% for fragment in statement.fragments|default([]) %}
                            {% if fragment.elementTitle != null %}
                                {% set fragmentElementsList = fragmentElementsList ~ '<li>' ~ fragment.elementTitle|default('') %}
                                {% if fragment.paragraphTitle != null %}
                                    {% set fragmentElementsList = fragmentElementsList ~ ' - ' ~fragment.paragraphTitle|default('') %}
                                {% endif %}
                                {% set fragmentElementsList = fragmentElementsList ~ '</li>' %}
                            {% endif %}
                        {% endfor %}
                        {% set fragmentElementsList = fragmentElementsList ~ fragmentElementsListWrapperEnd %}
                        {% apply spaceless -%}
                            {% if fragmentElementsList != fragmentElementsListWrapper %}
                                <div class="layout--flush">
                                    <strong class="layout__item lbl u-mb-0_25 block">
                                        {{ "fragments.elements"|trans }}:
                                    </strong>
                                    <div class="layout__item u-mb-0_75">
                                        {{ fragmentElementsList|wysiwyg }}
                                    </div>
                                </div>
                            {% endif %}
                        {%- endapply %}
                    </div>
                {% endif %}  {# end if hasPermission('field_procedure_elements') #}

                {% if not readonly %}
                    <div class="u-1-of-2 inline-block u-pl-0_5 align-top">
                        {% if hasPermission('field_procedure_elements') %}
                            {# Select new plandocument #}
                            {% set planDocumentOptions = {} %}
                            {# add empty option #}
                            {% set planDocumentOptions = planDocumentOptions|merge([{
                                label: '',
                                value: ''
                            }]) %}

                            {% if templateVars.table.elements is defined %}
                                {% for element in templateVars.table.elements %}
                                    {% set planDocumentOptions =  planDocumentOptions|merge([{
                                        label: element.title,
                                        value: element.ident
                                    }])%}
                                {% endfor %}
                            {% endif %}

                            {{ uiComponent('form.element', {
                                label: { text: 'plandocument.new'|trans },
                                control: { name: 'r_element_new', options: planDocumentOptions },
                                type: 'select',
                                id: 'elementSelect',
                                elementStyle: 'inline-block',
                                attributes: ['data-cy=statementDetail:elementNew']
                            }) }}
                        {% endif %}

                        {% if hasPermission('field_procedure_paragraphs') %}
                            {% if templateVars.table.paragraph is defined %}
                                {% for elementIdent, elementDocuments in templateVars.table.paragraph %}
                                    {# add empty option #}
                                    {% set paragraphOptions = [{ label: '-', value: '' }] %}
                                    <div id="js-paragraph_{{ elementIdent }}" class="js-paragraph u-mt-0_5">
                                        {% for document in elementDocuments %}
                                            {% set paragraphOptions = paragraphOptions|merge([{
                                                label: document.title,
                                                value: document.ident
                                            }]) %}
                                        {% endfor %}

                                        {% set paragraphControlOptions = { name: 'r_paragraph_' ~ elementIdent ~ '_new' , required: true, dataDpValidateIf:'#elementSelect===' ~ elementIdent, options: paragraphOptions } %}

                                        {# if the paragraph the statement refers to has been deleted meanwhile #}
                                        {% if templateVars.table.paragraphDeleted is defined %}
                                            {% set paragraphDeletedOptGroup = [{
                                                label: 'paragraph.deleted',
                                                options: { label: templateVars.table.paragraphDeleted.title, value: templateVars.table.paragraphDeleted.ident, selected: true }
                                            }] %}
                                            {% set paragraphControlOptions = paragraphControlOptions|merge({ optGroup: paragraphDeletedOptGroup }) %}
                                        {% endif %}

                                        {{ uiComponent('form.element', {
                                            label: { text: 'paragraph.new'|trans },
                                            control: paragraphControlOptions,
                                            type: 'select',
                                            id: 'r_paragraph_' ~ elementIdent ~ '_new',
                                            required: true
                                        }) }}

                                        {# reset options #}
                                        {% set paragraphOptions = {} %}
                                    </div>
                                {% endfor %}
                            {% endif %}
                        {% endif %}

                        {% if hasPermission('field_procedure_documents') %}
                            {% if templateVars.table.documents is defined %}
                                {% for elementIdent, elementDocuments in templateVars.table.documents %}
                                    {# add empty option #}
                                    {% set fileOptions = [{ label: '-', value: '' }] %}
                                    <div id="js-document_{{ elementIdent }}" class="js-document u-mt-0_5">

                                        {% for document in elementDocuments %}
                                            {% set fileOptions = fileOptions|merge([{
                                                label: document.title,
                                                value: document.ident
                                            }]) %}
                                        {% endfor %}

                                        {{ uiComponent('form.element', {
                                            label: { text: 'file.new'|trans },
                                            control: { name: 'r_document_' ~ elementIdent ~ '_new', dataDpValidateIf:'#elementSelect===' ~ elementIdent, options: fileOptions },
                                            type: 'select',
                                            id: 'r_document_' ~ elementIdent ~ '_new',
                                            required: true
                                        }) }}

                                        {# reset options #}
                                        {% set fileOptions = {} %}
                                    </div>
                                {% endfor %}
                            {% endif %}
                        {% endif %}
                    </div>
                {% endif %}

                {# original statement file #}
                <h4 class="font-size-large u-mt-0_5 u-pt-0_5 border--top">{{ 'attachment.original'|trans }}</h4>
                <div class="layout--flush">
                    {% set source_statements = statement.attachments|default([])|filter(el => el.type == 'source_statement') %}
                    {% if source_statements|length > 0 %}
                        {% for source_stn in source_statements %}
                            <div class="layout__item u-1-of-1 u-mb-0_5">
                                <a
                                    class="o-hellip--nowrap u-mb-0_25 block"
                                    title="{{ source_stn.file.name|default }}"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    href="{{ path("core_file_procedure", { 'hash': source_stn.file.hash|default, 'procedureId': procedure }) }}">
                                    <i class="fa fa-file-o"></i> {{ source_stn.file.filename|default }}
                                </a>
                                {% if not readonly %}
                                    {{ uiComponent('form.element', {
                                        type: 'checkbox',
                                        id: 'r_attachment_source_statement' ~ loop.index,
                                        label: { text: 'attachment.delete'|trans },
                                        control: {
                                            name: 'r_delete_file_source_statement[]',
                                            value: source_stn.file.hash|default
                                        }
                                    }) }}
                                {% endif %}
                            </div>
                        {% endfor %}
                    {% elseif not readonly %}
                        <div class="layout--flush">
                            <div class="layout__item u-1-of-1">
                                {{
                                fileupload(
                                    "r_fileupload_source_statement",
                                    "document.attach",
                                    "all",
                                    "form.button.upload.file",
                                    1,
                                    true
                                )
                                }}
                            </div>
                        </div>
                    {% endif %}
                </div>

                {# Files attached to the statement #}
                {% if hasPermission('field_statement_file') %}
                    <h4 class="font-size-large u-mt-0_5 u-pt-0_5 border--top">{{ 'more.attachments'|trans }}</h4>

                    {% if not readonly %}
                        <div class="layout--flush">
                            <div class="layout__item u-1-of-1">
                                {{
                                fileupload(
                                    "r_fileupload",
                                    "documents.attach",
                                    "all",
                                    "form.button.upload.files",
                                    20,
                                    true
                                )
                                }}
                            </div>
                        </div>
                    {% endif %}

                    {% if statement.files|length > 0 %}
                        <div class="layout--flush">
                            <strong class="layout__item lbl block u-mb-0_5">
                                {{ "attachments"|trans }}
                            </strong>
                            {% apply spaceless -%}
                                {% for file in statement.files|default([])|filter(file => file|length > 0) %}
                                    <div class="layout__item u-1-of-3 u-mb-0_5">
                                        <a
                                            class="o-hellip--nowrap u-mb-0_25 block"
                                            title="{{ file|getFile('name') }}"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            href="{{ path("core_file_procedure", { 'hash': file|getFile('hash'), 'procedureId': procedure }) }}">
                                            <i class="fa fa-file-o"></i> {{ file|getFile('name') }}
                                        </a>
                                        {% if not readonly %}
                                            {{ uiComponent('form.element', {
                                                type: 'checkbox',
                                                id: 'r_attachment_delete' ~ loop.index,
                                                label: { text: 'attachment.delete'|trans },
                                                control: {
                                                    name: 'r_delete_file[]',
                                                    value: file|getFile('hash')
                                                }
                                            }) }}
                                        {% endif %}
                                    </div>
                                {% endfor %}
                            {%- endapply %}
                        </div>
                    {% endif %}

                {% endif %}

                {# Location #}
                {% if formDefinitions.mapAndCountyReference.enabled == true or formDefinitions.countyReference.enabled == true %}
                    {% if hasPermission('field_statement_polygon') or hasPermission('field_statement_county') or hasPermission('field_statement_municipality') or procedureStatementPriorityArea  %}
                        <h4 class="font-size-large u-mt-0_5 u-pt-0_5 border--top">{{ 'public.participation.relation'|trans }}</h4>
                    {% endif %}

                    {% if hasPermission('field_statement_polygon') and formDefinitions.mapAndCountyReference.enabled == true %}
                        <div class="layout--flush u-mb {% if not hasPermission('field_statement_county') and not hasPermission('field_statement_municipality') and not procedureStatementPriorityArea %}u-pb{% endif %}">
                            <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                {{ "location"|trans }}
                            </strong>
                            {% if statement.polygon is defined and statement.polygon != '' %}
                                <a href="#" @click.prevent.stop="(function(){$refs.mapModal.toggleModal({{ statement.polygon|convertLegacyPolygon|escape('html_attr') }})})()">{{ 'see'|trans }}</a>
                            {% else %}
                                <span class="layout__item u-3-of-4 color--grey">{{ 'map.no_outline'|trans }}</span>
                            {% endif %}
                        </div>
                    {% endif %}

                    {# COUNTIES #}
                    {# editable for all statements, not just manual ones #}
                    {% if hasPermission('field_statement_county') %}

                        {% if readonly %}
                            <div class="layout--flush u-mb-0_75">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "counties"|trans }}
                                </strong>
                                {% if statement.counties is defined %}
                                    {% if statement.counties|default(false) != false %}
                                        <ul class="o-list o-list--csv layout__item u-1-of-1 u-mb-0_5 color--grey">
                                            {% for county in templateVars.availableCounties %}
                                                {% if county in statement.counties|default(false) %}
                                                    <li class="o-list__item">{{ county.name }}</li>
                                                {% endif %}
                                            {% endfor %}
                                        </ul>
                                    {% else %}
                                        <input type="text" value="-" disabled>
                                    {% endif %}
                                {% endif %}
                            </div>
                        {% else %}
                            <div class="layout--flush u-mb">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "counties"|trans }}
                                </strong>
                                <dp-multiselect
                                    v-model="selectedCounties"
                                    class="layout__item u-1-of-1 inline-block"
                                    label="name"
                                    multiple
                                    :options="counties"
                                    track-by="id"
                                    @input="sortSelected('Counties')">
                                    <template v-slot:option="{ props }">
                                        {% verbatim %}{{ props.option.name }}{% endverbatim %}
                                    </template>
                                    <template v-slot:tag="{ props }">
                                    <span class="multiselect__tag">
                                        {%  verbatim %}{{ props.option.name }}{%  endverbatim %}
                                        <i aria-hidden="true"  @click="props.remove(props.option)" tabindex="1" class="multiselect__tag-icon"></i>
                                        <input type="hidden" :value="props.option.id" name="r_counties[]"/>
                                    </span>
                                    </template>
                                </dp-multiselect>
                            </div>
                        {% endif %}
                    {% endif %}

                    {# MUNICIPALITIES #}
                    {# editable for all statements, not just manual ones #}
                    {% if hasPermission('field_statement_municipality') and formDefinitions.mapAndCountyReference.enabled == true %}

                        {% if readonly %}
                            <div class="layout--flush u-mb {% if statement.priorityAreas is not defined or not procedureStatementPriorityArea %}u-pb{% endif %}">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "municipalities"|trans }}
                                </strong>
                                {% if statement.municipalities is defined %}
                                    {% if statement.municipalities|default(false) != false %}
                                        <ul class="o-list o-list--csv layout__item u-1-of-1 u-mb-0_5 color--grey">
                                            {% for municipality in templateVars.availableMunicipalities %}
                                                {% if municipality in statement.municipalities|default(false) %}
                                                    <p class="o-list__item">{{ municipality.name }}</p>
                                                {% endif %}
                                            {% endfor %}
                                        </ul>
                                    {% else %}
                                        <input type="text" value="-" disabled>
                                    {% endif %}
                                {% endif %}
                            </div>
                        {% else %}
                            <div class="layout--flush u-mb {% if statement.priorityAreas is not defined or not procedureStatementPriorityArea %}u-pb{% endif %}">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "municipalities"|trans }}
                                </strong>
                                <dp-multiselect
                                    v-model="selectedMunicipalities"
                                    class="layout__item u-1-of-1 inline-block"
                                    label="name"
                                    multiple
                                    :options="municipalities"
                                    track-by="id"
                                    @input="sortSelected('Municipalities')">
                                    <template v-slot:option="{ props }">
                                        {% verbatim %}{{ props.option.name }}{% endverbatim %}
                                    </template>
                                    <template v-slot:tag="{ props }">
                                    <span class="multiselect__tag">
                                        {% verbatim %}{{ props.option.name }}{% endverbatim %}
                                        <i aria-hidden="true"  @click="props.remove(props.option)" tabindex="1" class="multiselect__tag-icon"></i>
                                        <input type="hidden" :value="props.option.id" name="r_municipalities[]"/>
                                    </span>
                                    </template>
                                </dp-multiselect>
                            </div>
                        {% endif %}
                    {% endif %}

                    {# priority areas #}
                    {# editable for all statements, not just manual ones #}
                    {% if procedureStatementPriorityArea and formDefinitions.mapAndCountyReference.enabled == true %}

                        {% if readonly %}
                            <div class="layout--flush u-pb u-mb">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "priorityArea"|trans }}
                                </strong>
                                {% if statement.priorityAreas|default(false) != false %}
                                    {% if statement.municipalities|default(false) != false %}
                                        <ul class="o-list o-list--csv layout__item u-3-of-4 u-mb-0_5 color--grey">
                                            {% for priorityArea in templateVars.availablePriorityAreas %}
                                                {% if priorityArea in statement.priorityAreas|default(false) %}
                                                    <li class="o-list__item">{{ priorityArea.name }}</li>
                                                {% endif %}
                                            {% endfor %}
                                        </ul>
                                    {% endif %}
                                {% else %}
                                    <input class="color--grey" type="text" value="-" disabled>
                                {% endif %}
                            </div>
                        {% else %}
                            <div class="layout--flush u-pb u-mb">
                                <strong class="layout__item u-1-of-4 block u-mb-0_25">
                                    {{ "priorityArea"|trans }}
                                </strong>
                                <dp-multiselect
                                    v-model="selectedPriorityAreas"
                                    class="layout__item u-1-of-1 inline-block"
                                    label="name"
                                    multiple
                                    :options="priorityAreas"
                                    track-by="id"
                                    @input="sortSelected('PriorityAreas')">
                                    <template v-slot:option="{ props }">
                                        {% verbatim %}{{ props.option.name }}{% endverbatim %}
                                    </template>
                                    <template v-slot:tag="{ props }">
                                    <span class="multiselect__tag">
                                        {% verbatim %}{{ props.option.name }}{% endverbatim %}
                                        <i aria-hidden="true"  @click="props.remove(props.option)" tabindex="1" class="multiselect__tag-icon"></i>
                                        <input type="hidden" :value="props.option.id" name="r_priorityAreas[]"/>
                                    </span>
                                    </template>
                                </dp-multiselect>
                            </div>
                        {% endif %}
                    {% endif %}
                {% endif %}

                {% block categories %}{% endblock categories %}

            </div>
        </div>
    </dp-accordion>
</fieldset>
{% endapply %}
