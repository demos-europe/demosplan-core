{% set publicProcedures = procedureList|default([]) %}

    {#
        Leaflet. To be refactored into one of:
            - DemosPlanProcedureBundle/Resources/client/js/components/publicindex/Procedures.vue which uses Leaflet / Vue
            - DemosPlanMapBundle/Resources/client/js/components/map/DpOlMap.vue which uses openlayers 5 / Vue
        Possibly the 2nd option but the Leaflet Markercluster looks better.
    #}
    <script nonce="{{ csp_nonce('script') }}">
        var map, markersLayer, popupMarker;
        var initialProcedures = JSON.parse('{{ procedureList|json_encode|e('js', 'utf-8') }}')
        var nonLocalizedProcedures = []
        for (var i = 0; i < initialProcedures.length; i++) {
            if (initialProcedures[i].coordinate === '') {
                nonLocalizedProcedures.push(initialProcedures[i].id)
            }
        }

        $(function ($) {
            //Global default bounds
            var mapExtent = {{ map.publicExtent }};

            // #########################################################
            // define Projection

            var myProjectionName = window.dplan.defaultProjectionLabel;
            proj4.defs(myProjectionName, window.dplan.defaultProjectionString);

            var bb = mapExtent;
            var bbsw = proj4(window.dplan.defaultProjectionLabel, "WGS84", [bb[0], bb[1]]).reverse();
            var bbne = proj4(window.dplan.defaultProjectionLabel, "WGS84", [bb[2], bb[3]]).reverse();
            var sw = new L.LatLng(bbsw[0], bbsw[1]);
            var ne = new L.LatLng(bbne[0], bbne[1]);
            var bbox = new L.LatLngBounds(sw,ne);

            {% block initialSettings %}
                var initialZoom = 8;
                var minZoom = 8;
                var initialLat = 54.5;
                var initialLon = 9.5;

            {% endblock initialSettings %}

            {% block publicBaselayer %}

                var publicBaselayer = new L.tileLayer.wms(
                    "{{ map.publicBaselayer|default|raw  }}",{# Raw-filter usage is necessary and considered as save here #}
                    {
                        layers: '{{ map.publicBaselayerLayers|default }}',
                        format: 'image/png',
                        //crs: mapprojection,
                        //maxZoom: 14,
                        minZoom: minZoom,
                        bounds: bbox,
                        transparent: true

                    });
            {% endblock %}

            map = L.map('map', {
                center: new L.LatLng(initialLat, initialLon),
                zoom: initialZoom,
                layers: [publicBaselayer],
                maxBounds: bbox,
                attributionControl: false
            });

            L.control.attribution({prefix: '{{ map.mapAttribution|default|trans|wysiwyg }}' || Translator.trans('map.attribution.default', { a: function (msg) { return '<a href="/impressum">' + msg + '</a>' }}) }).addTo(map);

            (function() {
                var control = new L.Control({position:'topleft'})
                control.onAdd = function (map) {
                    let azoom = L.DomUtil.create('div','leaflet-control-zoom leaflet-bar leaflet-control u-mt-0')
                    azoom.innerHTML = '<a class="leaflet-control-zoom-out ' + prefixClass('u-pb-0_5 u-ph-0_25 cursor-pointer') + '" tabindex="0" title="{{ 'map.zoom.reset'|trans }}"><i class="' + prefixClass('fa fa-circle-o font-size-medium') + '" aria-hidden="true"></i></a>'
                    L.DomEvent
                        .disableClickPropagation(azoom)
                        .addListener(azoom, 'click', fitToMarkers, azoom)
                    return azoom
                };
                return control
            }()).addTo(map)

            markersLayer = L.markerClusterGroup();
            {# test for valid procedure coordinates via twig regex #}
            {% for publicProcedure in publicProcedures|filter(publicProcedure => publicProcedure.settings.coordinate|split(',')[0] matches '/^[-+]?[0-9]*\\.?[0-9]+$/' and publicProcedure.settings.coordinate|split(',')[1] matches '/^[-+]?[0-9]*\\.?[0-9]+$/') %}
                popupMarker = {% include '@DemosPlanCore/DemosPlanMap/map_public_participation_popup.html.twig' with {
                    procedureTitle: getProcedureName(publicProcedure),
                    periodStart: getProcedureStartDate(publicProcedure)|dplanDateAnnotated ,
                    periodEnd: getProcedureEndDate(publicProcedure)|dplanDateAnnotated ,
                    phase: getProcedurePhase(publicProcedure) ,
                    shortText: publicProcedure.externalDesc,
                    procedureUrl: path('DemosPlan_procedure_public_detail', {'procedure': publicProcedure.ident}) ,
                    ident: publicProcedure.ident
                } %};

                {# replace any remaining placeholders #}
                marker = new L.marker(proj4(window.dplan.defaultProjectionLabel, "WGS84", [{{ publicProcedure.settings.coordinate }}]).reverse())
                marker.bindPopup(popupMarker
                    .replace('___title___', '')
                    .replace('___start___', '')
                    .replace('___end___', '')
                    .replace('___phase___', '')
                    .replace('___shortText___', ''))
                marker.key = "{{ publicProcedure.ident }}"
                markersLayer.addLayer(marker)
            {% endfor %}
            map.addLayer(markersLayer);
            let mapContainer = document.getElementById('map')
            if (mapContainer) {
                // add some a11y features to leaflet map
                mapContainer.setAttribute('aria-hidden', true)
                let markersElems = mapContainer.querySelectorAll('.leaflet-marker-icon')
                for (var i = 0; i < markersElems.length; i++) {
                    markersElems[i].setAttribute('aria-hidden', true)
                }
            }

            // create the events to update the sticky map
            // this is  a fix for T15789
            let resizeEvent = document.createEvent('HTMLEvents')
            resizeEvent.initEvent('resize', true, false)

            // filter procedureList on zoomend or panend
            map.on('zoomend moveend', function() {
                let visibleMarkers = []
                markersLayer.eachLayer(function(l) {
                    if (l instanceof L.Marker && map.getBounds().contains(l.getLatLng())) {
                      visibleMarkers.push(l.key)
                    }
                })

                let procedureContainer = document.querySelector('ul[data-procedurelist-content]')
                if (procedureContainer) {
                    let allProcedures = Array.prototype.slice.call(procedureContainer.querySelectorAll('li[data-procedure-id]'))
                    if ($(prefixClass('.c-proceduresearch__map')).is(':visible')) {
                        allProcedures.forEach(function (procedure) {
                            let id = procedure.getAttribute('data-procedure-id')
                            // only hide localized procedures if they are not visible in the map. Non-localized procedures will always be displayed
                            if (visibleMarkers.indexOf(id) < 0 && nonLocalizedProcedures.indexOf(id) < 0) {
                                procedure.classList.add(prefixClass('hide-visually'))
                            } else {
                                if (procedure.classList.contains(prefixClass('hide-visually'))) {
                                    procedure.classList.remove(prefixClass('hide-visually'))
                                }
                            }
                        })
                        let noProcedureNotification = document.getElementById('noProcedureNotification')
                        // show notification only if there are procedures visible in other parts of the map.
                        // If the filter/search did not find any procedures, there is a hint below filters, that nothing was found.
                        allProcedures.length > 0 && visibleMarkers.length === 0 ?
                            noProcedureNotification.classList.remove(prefixClass('display--none')) :
                            noProcedureNotification.classList.add(prefixClass('display--none'))
                    }
                }

                // dispatch the events to update the sticky map
                // this is  a fix for T15789
                window.dispatchEvent(resizeEvent)
            });
            map.whenReady(fitToMarkers)

            function fitToMarkers () {
                const proceduresLength = ({{ publicProcedures|default([])|length }})
                const visibleMarkers = []
                markersLayer.eachLayer(function(l) {
                    if (l instanceof L.Marker) {
                        visibleMarkers.push(l.key)
                    }
                })
                const allowedQueryParams = ['ars', 'ags', 'gkz']
                let isFilteredUrl = false
                for (let i = 0; i < allowedQueryParams.length; i++) {
                    if (window.location.href.indexOf('?' + allowedQueryParams[i] + '=') > -1) {
                        isFilteredUrl = true
                    }
                }

                proceduresLength > 0 && visibleMarkers.length > 0 && (hasPermission('feature_public_index_map_fit_bounds') || isFilteredUrl)
                    ?  map.fitBounds(markersLayer.getBounds().pad(0.2))
                    :  map.setView(map.options.center, map.options.zoom)
            }
        });

    </script>
